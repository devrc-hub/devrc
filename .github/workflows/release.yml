name: Build and publish packages
on:
  push:
    tags:
      - "v*"
      # Test workflow without atrifacts publication
      - "test-release-*"

env:
  CARGO_TERM_COLOR: always

jobs:

  release-linux:

    name: Release ${{ matrix.target }} package
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-unknown-linux-musl
          #   cross: false
          - target: x86_64-unknown-linux-gnu
            cross: false
            feature: --all-features
            name: with-deno
          - target: x86_64-unknown-linux-gnu
            cross: false
            feature: ""
            name: base
          - target: x86_64-unknown-linux-musl
            cross: false
            feature: ""
            name: base

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install musl tools and dependencies
        run: |
          sudo apt-get install musl-tools libssl-dev musl-dev gcc build-essential dpkg rpm

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo directories
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install target x86_64-unknown-linux-musl
        run: |
          rustup target add x86_64-unknown-linux-musl

      - name: Install cargo-deb and cargo-rpm
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb cargo-rpm

      - name: Build binary for target ${{ matrix.target }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Create archive ${{ matrix.target }}
        run: |
          rustup target add x86_64-unknown-linux-musl

          cargo build --release ${{ matrix.feature }} --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/devrc ./devrc
          chmod +x devrc
          tar -czf devrc-${{ matrix.target }}-${{ matrix.name }}.tar.gz devrc

      - name: Create deb package
        uses: actions-rs/cargo@v1
        with:
          command: deb

      - name: Create deb package
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --variant deno

      - name: Create rpm package
        uses: actions-rs/cargo@v1
        with:
          command: rpm
          args: build

      - name: Generate Changelog ${{ matrix.target }}
        run: echo "# Good things have arrived 1" > ${{ github.workflow }}-CHANGELOG.txt

      - name: Publish ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          body_path: ${{ github.workflow }}-CHANGELOG.txt
          draft: true
          prerelease: true
          files: |
            ./devrc-*
            ./target/debian/*.deb
            ./target/release/rpmbuild/RPMs/*/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-darwin:
    name: Release darwin package "${{ matrix.name }}"
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            cross: false
            feature: ""
            name: base
          - target: x86_64-apple-darwin
            cross: false
            feature: "--all-features"
            name: with-deno

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo directories
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Build binary for target ${{ matrix.target }}
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release --target ${{ matrix.target }}

      - name: Create archive ${{ matrix.target }}
        run: |
          cargo build --release ${{ matrix.feature }} --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/devrc ./devrc
          chmod +x devrc
          tar -czf devrc-${{ matrix.target }}-${{ matrix.name }}.tar.gz devrc

      - name: Publish ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          prerelease: true
          files: ./devrc-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-crate:
    name: Release crate
    runs-on: ubuntu-latest

    # Publish only if the packages were built
    needs: [release-linux, release-darwin]

    steps:
      - uses: actions/checkout@v1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Show package contents
        run: |
          cargo package --list --allow-dirty

      - name: Build package and publish the crate to crates.io
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cargo publish --token=${{ secrets.CRATES_TOKEN }}
