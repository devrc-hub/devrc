name: Build and publish packages
on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:

  # Run tests before release
  tests:
    name: "Test ${{ matrix.rust }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    continue-on-error: true

    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2000M
      SCCACHE_IDLE_TIMEOUT: 0
      SCCACHE_DIR: ${{ matrix.SCCACHE_DIR }}

    strategy:
      fail-fast: false
      matrix:
        # rust: [stable]
        # os: [ubuntu-latest, macos-latest]
        include:
          - {os: ubuntu-latest, rust: stable, SCCACHE_DIR: /home/runner/.cache/sccache}
          - {os: macos-latest, rust: stable, SCCACHE_DIR: /Users/runner/Library/Caches/Mozilla.sccache}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Cache cargo directories
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install sccache via precompiled build
        if: startsWith(matrix.os, 'ubuntu')
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.15
        run: |
          SCCACHE_FILE=sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/v$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          chmod +x $SCCACHE_FILE/sccache
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install sccache via homebrew
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install sccache

      - name: Cache sccache output on ${{ matrix.os }}
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ matrix.SCCACHE_DIR }}
          key: ${{ runner.os }}-sccache-debug-1-${{ hashFiles('**/Cargo.*') }}

      - name: Start sccache server
        env:
          SCCACHE_DIR: ${{ matrix.SCCACHE_DIR }}
        run: |
          sccache --start-server


      - name: Run tests
        run: cargo test --all-features --no-fail-fast
        env:
          RUST_BACKTRACE: full
          CARGO_INCREMENTAL: 0
          # RUSTDOCFLAGS: "-Cpanic=abort"
          # RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off"

      - name: Stop sccache server
        run: |
          sccache --stop-server

  release-linux:

    name: Release ${{ matrix.target }} package
    runs-on: ubuntu-latest
    needs: tests

    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-unknown-linux-musl
          #   cross: false
          - target: x86_64-unknown-linux-gnu
            cross: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install musl tools and dependencies
        run: |
          sudo apt-get install musl-tools libssl-dev musl-dev gcc build-essential

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo directories
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install target x86_64-unknown-linux-musl
        run: |
          rustup target add x86_64-unknown-linux-musl

      # - name: Build binary for target ${{ matrix.target }}
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release --target ${{ matrix.target }}

      - name: Create archive ${{ matrix.target }}
        run: |
          rustup target add x86_64-unknown-linux-musl

          cargo build --release --all-features --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/devrc ./devrc
          chmod +x devrc
          tar -czf devrc-${{ matrix.target }}.tar.gz devrc

      - name: Generate Changelog ${{ matrix.target }}
        run: echo "# Good things have arrived 1" > ${{ github.workflow }}-CHANGELOG.txt

      - name: Publish ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          body_path: ${{ github.workflow }}-CHANGELOG.txt
          draft: true
          prerelease: true
          files: ./devrc-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-darwin:
    name: Release darwin package
    runs-on: macos-latest
    needs: tests

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            cross: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo directories
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Build binary for target ${{ matrix.target }}
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release --target ${{ matrix.target }}

      - name: Create archive ${{ matrix.target }}
        run: |
          cargo build --release --all-features --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/devrc ./devrc
          chmod +x devrc
          tar -czf devrc-${{ matrix.target }}.tar.gz devrc

      - name: Publish ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          prerelease: true
          files: ./devrc-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-crate:
    name: Release crate
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - uses: actions/checkout@v1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Show package contents
        run: |
          cargo package --list --allow-dirty

      - name: Build package and publish the crate to crates.io
        run: |
          cargo publish --token=${{ secrets.CRATES_TOKEN }}
